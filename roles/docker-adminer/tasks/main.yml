---
- name: Create DNS Reconds on Cloudflare for this container
  cloudflare_dns:
    account_api_token: "{{ cloudflare.api }}"
    account_email: "{{ cloudflare.email }}"
    proxied: "yes"
    record: "{{ containers.adminer.subdomain }}"
    solo: "true"
    state: "present"
    type: "CNAME"
    value: "{{ containers.traefik.subdomain }}.{{ domain }}"
    zone: "{{ domain }}"

- name: Verify required directories with correct permissions are created
  file:
    recurse: yes
    path: "{{ directories.container_root }}/{{ containers.adminer.subdomain }}"
    owner: "{{ users.primary.user }}"
    group: "{{ users.primary.group }}"
    state: directory
    setype: container_file_t

- name: Start Adminer
  docker_container:
    name: "{{ containers.adminer.subdomain }}"
    hostname: "{{ containers.adminer.subdomain }}"
    state: started
    restart_policy: unless-stopped
    image: adminer
    links: # Prevent container creation and startup until linked containers are running
      - "{{ containers.mariadb.subdomain }}:{{ containers.mariadb.subdomain }}"
    log_driver: "json-file"
    log_options:
      max-size: "12m"
      max-file: "3"
    env:
      # DB_HOST: "{{ containers.mariadb.subdomain }}:{{ containers.mariadb.port }}" # MariaDB Host
      # DB_USER: "{{ containers.bookstack.subdomain }}" # MariaDB User
      # DB_PASS: "{{ mariadb.bookstack_passwd }}" # MariaDB Password
      # DB_DATABASE: "{{ containers.bookstack.subdomain }}" # Bookstack Database
      ADMINER_DEFAULT_SERVER: "{{ containers.mariadb.subdomain }}"
      ADMINER_DESIGN: "hydra"
      PUID: "{{ users.primary.uid }}" # Pass proper UID to the container
      PGID: "{{ users.primary.gid }}" # Pass proper GID to the container
      TZ: "{{ timezone }}"
    networks_cli_compatible: no
    networks:
      - name: "{{ containers.adminer.network }}"
        aliases: "{{ containers.adminer.subdomain }}"
    purge_networks: yes
    pull: true
    labels:
      ## Watchtower Updates
      com.centurylinklabs.watchtower.enable: "true"
      ## Enable Traefik
      traefik.enable: "true"
      ## HTTP Routers
      traefik.http.routers.adminer-rtr.entrypoints: "https"
      traefik.http.routers.adminer-rtr.rule: "Host(`{{ containers.adminer.subdomain }}.{{ containers.adminer.tld }}`)"
      traefik.http.routers.adminer-rtr.tls: "true"
      ## HTTP Services
      traefik.http.routers.adminer-rtr.service: "adminer-svc"
      traefik.http.services.adminer-svc.loadbalancer.server.port: "{{ containers.adminer.port | default('80') }}"
      ## Middlewares
      traefik.http.routers.adminer-rtr.middlewares: "chain-oauth@file"
...
