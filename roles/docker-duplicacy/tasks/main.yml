---
  # DNS Record Creation for hostname of container
- name: Create DNS Reconds on Cloudflare for this container
  cloudflare_dns: 
    account_api_token: "{{ cloudflare.api }}"
    account_email: "{{ cloudflare.email }}"
    proxied: "yes"
    record: "{{ containers.duplicacy.subdomain }}"
    solo: "true"
    state: "present"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    zone: "{{ domain }}"
  loop:
    - { type: 'A', value: '{{ ansible_default_ipv4.address }}' }
    - { type: 'AAAA', value: '{{ ansible_default_ipv6.address }}' }

  # Verify required directories with correct permissions are created
- name: check dir ownership
  file:
    recurse: yes
    path: "{{ directories.container_root }}/{{ item }}"
    owner: "{{ users.primary.user }}"
    group: "{{ users.primary.group }}"
    state: directory
    setype: container_file_t
  loop:
    - "{{ containers.duplicacy.subdomain }}"
    - "{{ containers.duplicacy.subdomain }}/cache"
    - "{{ containers.duplicacy.subdomain }}/filters"
    - "{{ containers.duplicacy.subdomain }}/filters/{{ containers.duplicacy.subdomain }}"

  # Verify templated required files with correct permissions are created
- name: Adding Required Files
  template:
    src: "templates/{{ item }}.j2"
    dest: "{{ directories.container_root }}/{{ containers.duplicacy.subdomain }}/{{ item }}"
    owner: "{{ users.primary.user }}"
    group: "{{ users.primary.group }}"
    mode: 0660
  loop:
    - "gcd-token.json"
    - "duplicacy.json"
    - "licenses.json"
    - "settings.json"

  # Verify required files with correct permissions are created
- name: Copy required files to container folders
  copy:
    src: "files/backup-sources.txt"
    dest: "{{ directories.container_root }}/{{ containers.duplicacy.subdomain }}/filters/{{ containers.duplicacy.subdomain }}/0"
    owner: "{{ users.primary.user }}"
    group: "{{ users.primary.group }}"
    mode: 0660
  
  # Standup the container in inventory
- name: Start Duplicacy
  docker_container:
    name: "{{ containers.duplicacy.subdomain }}"
    hostname: "{{ containers.duplicacy.subdomain }}"
    state: started
    restart_policy: unless-stopped
    image: erichough/duplicacy
    log_driver: "json-file"
    log_options:
      max-size: "12m"
      max-file: "3"
    # Mount required directories with the container
    mounts: 
      - type: bind 
        source: "{{ directories.container_root }}/{{ containers.duplicacy.subdomain }}"
        target: /etc/duplicacy
      - type: bind 
        source: "{{ directories.container_root }}/{{ containers.duplicacy.subdomain }}/cache"
        target: /var/cache/duplicacy
      - type: bind 
        read_only: yes 
        source: "{{ directories.container_root }}"
        target: "{{ directories.container_root }}"
    env:
      PUID: "{{ users.primary.uid }}" # Pass proper UID to the container
      PGID: "{{ users.primary.gid }}" # Pass proper GID to the container
      MACHINE_ID: "{{ duplicacy.machine_id }}" # Duplicacy Machine  ID
    networks_cli_compatible: no
    networks:
      - name: "{{ networks.docker.primary.name }}"
        aliases: "{{ containers.duplicacy.subdomain }}"
    purge_networks: yes
    pull: true 
    labels:
      ## Watchtower Updates
      com.centurylinklabs.watchtower.enable: "true"
      ## Enable Traefik
      traefik.enable: "true"
      ## HTTP Routers
      traefik.http.routers.duplicacy-rtr.entrypoints: "https"
      traefik.http.routers.duplicacy-rtr.rule: "Host(`{{ containers.duplicacy.subdomain }}.{{ containers.duplicacy.tld }}`)"
      traefik.http.routers.duplicacy-rtr.tls: "true"
      ## HTTP Services
      traefik.http.routers.duplicacy-rtr.service: "duplicacy-svc"
      traefik.http.services.duplicacy-svc.loadbalancer.server.port: "{{ containers.duplicacy.port | default('80') }}"
      ## Middlewares
      traefik.http.routers.duplicacy-rtr.middlewares: "chain-oauth@file"
...
  