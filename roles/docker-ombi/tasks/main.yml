---
- name: Create DNS Reconds on Cloudflare for this container
  cloudflare_dns:
    account_api_token: "{{ cloudflare.api }}"
    account_email: "{{ cloudflare.email }}"
    proxied: "yes"
    record: "{{ containers.ombi.subdomain.0 }}"
    solo: "true"
    state: "present"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    zone: "{{ domain }}"
  loop:
    - { type: 'A', value: '{{ ansible_default_ipv4.address }}' }
    - { type: 'AAAA', value: '{{ ansible_default_ipv6.address }}' }

- name: Create DNS Reconds on Cloudflare for this container
  cloudflare_dns:
    account_api_token: "{{ cloudflare.api }}"
    account_email: "{{ cloudflare.email }}"
    proxied: "yes"
    record: "{{ containers.ombi.subdomain.1 }}"
    solo: "true"
    state: "present"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    zone: "{{ domain }}"
  loop:
    - { type: 'A', value: '{{ ansible_default_ipv4.address }}' }
    - { type: 'AAAA', value: '{{ ansible_default_ipv6.address }}' }

- name: Verify required directories with correct permissions are created
  file:
    recurse: yes
    path: "{{ directories.container_root }}/{{ containers.ombi.subdomain.0 }}/"
    owner: "{{ users.primary.user }}"
    group: "{{ users.primary.group }}"
    state: directory
    setype: container_file_t

- name: Start Ombi
  docker_container:
    name: "{{ containers.ombi.subdomain.0 }}"
    hostname: "{{ containers.ombi.subdomain.0 }}"
    state: started
    restart_policy: unless-stopped
    image: linuxserver/ombi
    links: # Prevent container creation and startup until linked containers are running
    - "{{ containers.radarr.subdomain }}:{{ containers.radarr.subdomain }}"
    - "{{ containers.sonarr.subdomain }}:{{ containers.sonarr.subdomain }}"
    log_driver: "json-file"
    log_options:
      max-size: "12m"
      max-file: "3"
    volumes: # Mount required directories with the container
      - "{{ directories.container_root }}/{{ containers.ombi.subdomain.0 }}:/config:z"
    env:
      PUID: "{{ users.primary.uid }}" # Pass proper UID to the container
      PGID: "{{ users.primary.gid }}" # Pass proper GID to the container
    networks_cli_compatible: no
    networks:
      - name: "{{ networks.docker.primary.name }}"
        aliases: "{{ containers.ombi.subdomain.0 }}"
    purge_networks: yes
    pull: true
    labels:
      ## Watchtower Updates
      com.centurylinklabs.watchtower.enable: "true"
      ## Enable Traefik
      traefik.enable: "true"
      ## HTTP Routers
      traefik.http.routers.ombi-rtr.entrypoints: "https"
      traefik.http.routers.ombi-rtr.rule: "Host(`{{ containers.ombi.subdomain.0 }}.{{ containers.ombi.tld }}`, `{{ containers.ombi.subdomain.1 }}.{{ containers.ombi.tld }}`)"
      traefik.http.routers.ombi-rtr.tls: "true"
      ## HTTP Services
      traefik.http.routers.ombi-rtr.service: "ombi-svc"
      traefik.http.services.ombi-svc.loadbalancer.server.port: "{{ containers.ombi.port | default('80') }}"
      ## Middlewares
      traefik.http.routers.ombi-rtr.middlewares: "chain-no-auth@file"
...
