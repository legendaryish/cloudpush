---
- name: Create DNS Reconds on Cloudflare for this container
  cloudflare_dns:
    account_api_token: "{{ cloudflare.api }}"
    account_email: "{{ cloudflare.email }}"
    proxied: "yes"
    record: "{{ item }}"
    solo: "true"
    state: "present"
    type: "CNAME"
    value: "{{ containers.traefik.subdomain }}.{{ domain }}"
    zone: "{{ domain }}"
  loop:
    - "{{ containers.plex.subdomain.0 }}"
    - "{{ containers.plex.subdomain.1 }}"

- name: Verify required directories with correct permissions are created
  file:
    recurse: yes
    path: "{{ directories.container_root }}/{{ containers.plex.subdomain.0 }}/{{ item }}"
    owner: "{{ users.primary.user }}"
    group: "{{ users.primary.group }}"
    state: directory
    setype: container_file_t
  loop:
    - "cont-init.d"
    - "scripts"

- name: Verify templated required files with correct permissions are created
  template:
    src: "templates/{{ item }}.j2"
    dest: "{{ directories.container_root }}/{{ containers.plex.subdomain.0 }}/{{ item }}"
    owner: "{{ users.primary.user }}"
    group: "{{ users.primary.group }}"
    mode: 0770
  loop:
    - "cont-init.d/30-config"
    - "scripts/plex-analyze-cli.py"
    - "scripts/plex-analyze-curl.py"
    - "scripts/plex-analyzedeeply-cli.py"
    - "scripts/plex-library-stats.sh"

- name: Check if GPU exists on host to pass to Plex
  stat:
    path: '/dev/dri'
  register: dev_dri

- name: Start Plex
  docker_container:
    name: "{{ containers.plex.subdomain.0 }}"
    hostname: "{{ containers.plex.subdomain.0 }}"
    state: started
    restart_policy: unless-stopped
    image: linuxserver/plex
    links: # Prevent container creation and startup until linked containers are running
      - "{{ containers.rclone.subdomain }}:{{ containers.rclone.subdomain }}"
    log_driver: "json-file"
    log_options:
      max-size: "12m"
      max-file: "3"
    volumes: # Mount required directories with the container
      - "{{ directories.container_root }}/{{ containers.plex.subdomain.0 }}:/config:z"
      - "{{ directories.container_root }}/{{ containers.plex.subdomain.0 }}/cont-init.d/30-config:/etc/cont-init.d/30-config:z" # Bootstrap script
      - "{{ directories.host_drive_root }}:{{ directories.drive_root }}:rshared"
    env:
      PUID: "{{ users.primary.uid }}" # Pass proper UID to the container
      PGID: "{{ users.primary.gid }}" # Pass proper GID to the container
      PLEX_CLAIM: "{{ api_keys.plextoken }}" # Plex server claim ID https://plex.tv/claim
      TZ: "{{ timezone }}"
      VERSION: "latest" # The container will upgrade to the latest version of Plex the server operator is entitled to
      UMASK_SET: "{{ mount_options.umask }}" # File UMASK
    devices: "{{ '/dev/dri:/dev/dri' if dev_dri.stat.exists == True | default(False) else omit }}" # Pass GPU to the container, if it exists
    etc_hosts: # Block Plex Spying
      { 'analytics.plex.tv': '127.0.0.1', 'metrics.plex.tv': '127.0.0.1' }
    ports: # Pass required Plex ports to the host interface
      - '32400:32400/tcp'
      - '3005:3005/tcp'
      - '8324:8324/tcp'
    networks_cli_compatible: no
    networks:
      - name: "{{ containers.plex.network }}"
        aliases: "{{ containers.plex.subdomain.0 }}"
    purge_networks: yes
    pull: true
    labels:
      ## Watchtower Updates
      com.centurylinklabs.watchtower.enable: "true"
      ## Enable Traefik
      traefik.enable: "true"
      ## HTTP Routers
      traefik.http.routers.plex-rtr.entrypoints: "https"
      traefik.http.routers.plex-rtr.rule: "Host(`{{ containers.plex.subdomain.0 }}.{{ containers.plex.tld }}`)"
      traefik.http.routers.plex-rtr.tls: "true"
      ## HTTP Services
      traefik.http.routers.plex-rtr.service: "plex-svc"
      traefik.http.services.plex-svc.loadbalancer.server.port: "{{ containers.plex.port.0 | default('80') }}"
      ## Middlewares
      traefik.http.routers.plex-rtr.middlewares: "chain-no-auth@file"
      ## HTTP Routers
      traefik.http.routers.plex-tools-rtr.entrypoints: "https"
      traefik.http.routers.plex-tools-rtr.rule: "Host(`{{ containers.plex.subdomain.1 }}.{{ containers.plex.tld }}`)"
      traefik.http.routers.plex-tools-rtr.tls: "true"
      ## HTTP Services
      traefik.http.routers.plex-tools-rtr.service: "plex-tools-svc"
      traefik.http.services.plex-tools-svc.loadbalancer.server.port: "{{ containers.plex.port.1 | default('80') }}"
      ## Middlewares
      traefik.http.routers.plex-tools-rtr.middlewares: "chain-oauth@file"
...
