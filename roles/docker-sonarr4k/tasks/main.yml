---
#   # DNS Record Creation for hostname of container
# - name: Create DNS Reconds on Cloudflare for this container
#   cloudflare_dns:
#     account_api_token: "{{ cloudflare.api }}"
#     account_email: "{{ cloudflare.email }}"
#     proxied: "yes"
#     record: "{{ containers.sonarr4k.subdomain }}"
#     solo: "true"
#     state: "present"
#     type: "{{ item.type }}"
#     value: "{{ item.value }}"
#     zone: "{{ domain }}"
#   loop:
#     - { type: 'A', value: '{{ ansible_default_ipv4.address }}' }
#     - { type: 'AAAA', value: '{{ ansible_default_ipv6.address }}' }

#   # Verify required directories with correct permissions are created
# - name: check dir ownership
#   file:
#     recurse: yes
#     path: "{{ directories.container_root }}/{{ containers.sonarr4k.subdomain }}"
#     owner: "{{ users.primary.user }}"
#     group: "{{ users.primary.group }}"
#     state: directory
#     setype: container_file_t

#   # Verify templated required files with correct permissions are created
# - name: Adding Required Files
#   template:
#     src: "templates/config.xml.j2"
#     dest: "{{ directories.container_root }}/{{ containers.sonarr4k.subdomain }}/config.xml"
#     owner: "{{ users.primary.user }}"
#     group: "{{ users.primary.group }}"
#     mode: 0660

  # Standup the container in inventory
- name: Start Sonarr4k
  docker_container:
    name: "{{ containers.sonarr4k.subdomain }}"
    hostname: "{{ containers.sonarr4k.subdomain }}"
    state: started
    restart_policy: unless-stopped
    image: linuxserver/sonarr:preview
    links: # Prevent container creation and startup until linked containers are running
    - "{{ containers.nzbget.subdomain }}:{{ containers.nzbget.subdomain }}"
    log_driver: "json-file"
    log_options:
      max-size: "12m"
      max-file: "3"
    # Mount required directories with the container
    volumes:
      - "{{ directories.container_root }}/{{ containers.sonarr4k.subdomain }}:/config:z"
      - "{{ directories.host_data_dir }}:{{ directories.data_dir }}:z"
    env:
      PUID: "{{ users.primary.uid }}" # Pass proper UID to the container
      PGID: "{{ users.primary.gid }}" # Pass proper GID to the container
      UMASK: "{{ mount_options.umask }}" # File UMASK
    networks_cli_compatible: no
    networks:
      - name: "{{ networks.docker.primary.name }}"
        aliases: "{{ containers.sonarr4k.subdomain }}"
    purge_networks: yes
    pull: true
    labels:
      ## Watchtower Updates
      com.centurylinklabs.watchtower.enable: "true"
      ## Enable Traefik
      traefik.enable: "true"
      ## HTTP Routers
      traefik.http.routers.sonarr4k-rtr.entrypoints: "https"
      traefik.http.routers.sonarr4k-rtr.rule: "Host(`{{ containers.sonarr4k.subdomain }}.{{ containers.sonarr4k.tld }}`)"
      traefik.http.routers.sonarr4k-rtr.tls: "true"
      ## HTTP Services
      traefik.http.routers.sonarr4k-rtr.service: "sonarr4k-svc"
      traefik.http.services.sonarr4k-svc.loadbalancer.server.port: "{{ containers.sonarr4k.port | default('80') }}"
      ## Middlewares
      traefik.http.routers.sonarr4k-rtr.middlewares: "chain-oauth@file"
...
