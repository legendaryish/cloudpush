---
- name: Create DNS Reconds on Cloudflare for this container
  cloudflare_dns:
    account_api_token: "{{ cloudflare.api }}"
    account_email: "{{ cloudflare.email }}"
    proxied: "yes"
    record: "{{ containers.traefik.subdomain }}"
    solo: "true"
    state: "present"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    zone: "{{ domain }}"
  loop:
    - { type: 'A', value: '{{ ansible_default_ipv4.address|default(ansible_all_ipv4_addresses[0]) }}' }
    - { type: 'AAAA', value: '{{ ansible_default_ipv6.address|default(ansible_all_ipv6_addresses[0]) }}' }

- name: Verify required directories with correct permissions are created
  file:
    recurse: yes
    path: "{{ directories.container_root }}/{{ containers.traefik.subdomain }}/rules/"
    owner: "{{ users.primary.user }}"
    group: "{{ users.primary.group }}"
    state: directory
    setype: container_file_t

- name: Verify required files with correct permissions are created
  file:
    path: "{{ directories.container_root }}/{{ containers.traefik.subdomain }}/{{ item }}"
    state: touch
    owner: "{{ users.primary.user }}"
    group: "{{ users.primary.group }}"
    mode: 0600
  loop:
    - "accesslog.log"
    - "acme.json"

- name: Verify templated required files with correct permissions are created
  template:
    src: "templates/rules/{{ item }}.j2"
    dest: "{{ directories.container_root }}/{{ containers.traefik.subdomain }}/rules/{{ item }}"
    owner: "{{ users.primary.user }}"
    group: "{{ users.primary.group }}"
    mode: 0660
  loop:
    - "cockpit.toml"
    - "middlewares.toml"
    - "middleware-chains.toml"

- name: Start Traefik
  docker_container:
    name: "{{ containers.traefik.subdomain }}"
    hostname: "{{ containers.traefik.subdomain }}"
    state: started
    restart_policy: unless-stopped
    image: traefik:chevrotin
    log_driver: "json-file"
    log_options:
      max-size: "12m"
      max-file: "3"
    volumes: # Mount required directories with the container
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/var/log/traefik:/var/log:z"
      - "{{ directories.container_root }}/{{ containers.traefik.subdomain }}:/config:z"
    env:
      CF_API_EMAIL: "{{ cloudflare.email }}"
      CF_API_KEY: "{{ cloudflare.api }}"
      TRAEFIK_ACCESSLOG: "true"
      TRAEFIK_ACCESSLOG_BUFFERINGSIZE: "100"
      TRAEFIK_ACCESSLOG_FILEPATH: "/var/log/access.log"
      TRAEFIK_ACCESSLOG_FILTERS_STATUSCODES: "400-499"
      TRAEFIK_ACCESSLOG_FIELDS_DEFAULTMODE: "keep"
      TRAEFIK_ACCESSLOG_FIELDS_HEADERS_DEFAULTMODE: "keep"
      TRAEFIK_ACCESSLOG_FIELDS_NAMES_SMARTUTC: "drop"
      TRAEFIK_API: "true"
      # TRAEFIK_API_INSECURE: "true"
      TRAEFIK_CERTIFICATESRESOLVERS_CLOUDFLARE_ACME_CASERVER: "https://acme-v02.api.letsencrypt.org/directory" # LetsEncrypt Staging Server - uncomment when testing
      TRAEFIK_CERTIFICATESRESOLVERS_CLOUDFLARE_ACME_DNSCHALLENGE_PROVIDER: "cloudflare"
      TRAEFIK_CERTIFICATESRESOLVERS_CLOUDFLARE_ACME_DNSCHALLENGE_RESOLVERS: "1.1.1.1:53,1.0.0.1:53"
      TRAEFIK_CERTIFICATESRESOLVERS_CLOUDFLARE_ACME_EMAIL: "{{ cloudflare.email }}"
      TRAEFIK_CERTIFICATESRESOLVERS_CLOUDFLARE_ACME_STORAGE: "/config/acme.json"
      TRAEFIK_ENTRYPOINTS_HTTP_ADDRESS: ":80"
      TRAEFIK_ENTRYPOINTS_HTTPS_ADDRESS: ":443"
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      TRAEFIK_ENTRYPOINTS_HTTPS_FORWARDEDHEADERS_TRUSTEDIPS: "173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22"
      TRAEFIK_ENTRYPOINTS_TRAEFIK_ADDRESS: ":8080"
      TRAEFIK_LOG: "true"
      TRAEFIK_LOG_LEVEL: "ERROR" # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      TRAEFIK_GLOBAL_CHECKNEWVERSION: "true"
      TRAEFIK_GLOBAL_SENDANONYMOUSUSAGE: "false"
      TRAEFIK_PROVIDERS_DOCKER: "true"
      TRAEFIK_PROVIDERS_DOCKER_ENDPOINT: "unix:///var/run/docker.sock"
      TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT: "false"
      TRAEFIK_PROVIDERS_DOCKER_NETWORK: "{{ containers.traefik.network }}"
      TRAEFIK_PROVIDERS_FILE_DIRECTORY: "/config/rules" # Load dynamic configuration from one or more .toml or .yml files in a directory.
      TRAEFIK_PROVIDERS_FILE_WATCH: "true" # Only works on top level files in the rules folder
      TRAEFIK_SERVERSTRANSPORT_INSECURESKIPVERIFY: "true"
      TZ: "{{ timezone }}"
    networks_cli_compatible: no
    networks:
      - name: "{{ containers.traefik.network }}"
        aliases: "{{ containers.traefik.subdomain }}"
    ports: # Pass required Traefik ports to the host interface
      - "80:80/tcp"
      - "443:443/tcp"
    purge_networks: yes
    pull: true
    security_opts: "no-new-privileges:true"
    labels:
      ## Watchtower Updates
      com.centurylinklabs.watchtower.enable: "true"
      ## Enable Traefik
      traefik.enable: "true"
      ## HTTP-to-HTTPS Redirect
      traefik.http.routers.http-catchall.entrypoints: "http"
      traefik.http.routers.http-catchall.rule: "HostRegexp(`{host:.+}`)"
      traefik.http.routers.http-catchall.middlewares: "redirect-to-https"
      traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: "https"
      ## HTTP Routers
      traefik.http.routers.traefik-rtr.entrypoints: "{{ containers.traefik.proto | default('http') }}"
      traefik.http.routers.traefik-rtr.rule: "Host(`{{ containers.traefik.subdomain }}.{{ containers.traefik.tld }}`)"
      traefik.http.routers.traefik-rtr.tls: "true"
      # traefik.http.routers.traefik-rtr.tls.certresolver: "cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      traefik.http.routers.traefik-rtr.tls.domains[0].main: "{{ domain }}"
      traefik.http.routers.traefik-rtr.tls.domains[0].sans: "*.{{ domain }}"
      traefik.http.routers.traefik-rtr.tls.domains[1].main: "{{ control_domain_name }}"
      traefik.http.routers.traefik-rtr.tls.domains[1].sans: "*.{{ control_domain_name }}"
      ## Services - API
      traefik.http.routers.traefik-rtr.service: "api@internal"
      ## Middlewares
      traefik.http.routers.traefik-rtr.middlewares: "chain-oauth@file"

- name: Create DNS Reconds on Cloudflare for this container
  cloudflare_dns:
    account_api_token: "{{ cloudflare.api }}"
    account_email: "{{ cloudflare.email }}"
    proxied: "yes"
    record: "{{ containers.oauth.subdomain }}"
    solo: "true"
    state: "present"
    type: "CNAME"
    value: "{{ containers.traefik.subdomain }}.{{ containers.traefik.tld }}"
    zone: "{{ domain }}"

- name: Start Traefik OAuth
  docker_container:
    name: "{{ containers.oauth.subdomain }}"
    hostname: "{{ containers.oauth.subdomain }}"
    state: started
    restart_policy: unless-stopped
    image: thomseddon/traefik-forward-auth
    links: # Prevent container creation and startup until linked containers are running
    - "{{ containers.traefik.subdomain }}:{{ containers.traefik.subdomain }}"
    log_driver: "json-file"
    log_options:
      max-size: "12m"
      max-file: "3"
    env:
      AUTH_HOST: "{{ containers.oauth.subdomain }}.{{ containers.oauth.tld }}"
      CLIENT_ID: "{{ oauth.tld.id }}"
      CLIENT_SECRET: "{{ oauth.tld.secret }}"
      COOKIE_DOMAIN: "{{ containers.oauth.tld }}"
      LIFETIME: "2592000" # 30 days
      LOG_FORMAT: "text" # Log format (default: text) [text|json|pretty]  
      LOG_LEVEL: "info" # Log level (default: warn) [trace|debug|info|warn|error|fatal|panic]
      RULE_1_ACTION: "allow" # Setup rule to bypass oauth for API access
      RULE_1_RULE: "PathPrefix(`/api/public`) && Headers(`Content-Type`, `application/json`)"
      SECRET: "{{ oauth.tld.oauth_secret }}"
      TZ: "{{ timezone }}"
      URL_PATH: "/_oauth"
      WHITELIST: "{{ oauth.tld.email_1 }}, {{ oauth.tld.email_2 }}, {{ oauth.tld.email_3 }}"
    networks_cli_compatible: no
    networks:
      - name: "{{ containers.oauth.network }}"
        aliases: "{{ containers.oauth.subdomain }}"
    purge_networks: yes
    pull: true
    security_opts: "no-new-privileges:true"
    labels:
      ## Watchtower Updates
      com.centurylinklabs.watchtower.enable: "true"
      ## Enable Traefik
      traefik.enable: "true"
      ## HTTP Routers
      traefik.http.routers.oauth-rtr.entrypoints: "https"
      traefik.http.routers.oauth-rtr.rule: "Host(`{{ containers.oauth.subdomain }}.{{ containers.oauth.tld }}`)"
      traefik.http.routers.oauth-rtr.tls: "true"
      ## HTTP Services
      traefik.http.routers.oauth-rtr.service: "oauth-svc"
      traefik.http.services.oauth-svc.loadbalancer.server.port: "{{ containers.oauth.port | default('80') }}"
      ## Middlewares
      traefik.http.routers.oauth-rtr.middlewares: "chain-oauth@file"
...
