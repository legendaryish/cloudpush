---
# Control domain name is used for more privacy of some containers.
control_domain_name: example.com
# Public domain of the project
domain: example2.com

# User details
users:
  primary:
    gid: "999"
    group: "wheel"
    uid: "1000"
    user: "user1"
  secondary:
    gid: "999"
    group: "wheel"
    uid: "1001"
    user: "user2"
  # Grafana details are required for Grafana and Varken to work
  grafana:
    gid: "472"
    group: "grafana"
    uid: "472"
    user: "grafana"

# System groups to be created
system_groups:
  - { group: "docker", gid: "998" }
  - { group: "grafana", gid: "472" }
  - { group: "wheel", gid: "999" }

# SSH keys of primary and secondary users
ssh:
  primary: "{{ lookup('lastpass', 'user1 pub key', field='Public Key') }}"
  secondary: "{{ lookup('lastpass', 'user2 pub key', field='Public Key') }}"

# Complete list of required container details for docker setup and communication between containers
containers:
  # REQUIRED VARIABLES:
  #   subdomain
  #   tld
  # DEFAULTS: (define them if you need to change them)
  #   tld: domain to use
  #   proto: http
  #   port: 80
  #   host: {{ docker host name }}
  #   network: www
  #
  # Domain Hosts
  adminer:
    network: "{{ networks.docker.primary.name }}"
    port: "8080"
    subdomain: "adminer"
    tld: "{{ domain }}"
  alertmanager:
    network: "{{ networks.docker.primary.name }}"
    port: "9093"
    subdomain: "alertmanager"
    tld: "{{ domain }}"
  alltube:
    network: "{{ networks.docker.primary.name }}"
    subdomain: "alltube"
    tld: "{{ domain }}"
  asf:
    network: "{{ networks.docker.primary.name }}"
    port: "9087"
    subdomain: "asf"
    tld: "{{ domain }}"
  bazarr:
    network: "{{ networks.docker.primary.name }}"
    port: "6767"
    subdomain: "bazarr"
    tld: "{{ domain }}"
  bazarr4k:
    network: "{{ networks.docker.primary.name }}"
    port: "6767"
    subdomain: "bazarr4k"
    tld: "{{ domain }}"
  bookstack:
    network: "{{ networks.docker.primary.name }}"
    subdomain: "bookstack"
    tld: "{{ control_domain_name }}" # This is an example of the control domain in use. You can switch the TLD on any container this way.
  cadvisor:
    network: "{{ networks.docker.primary.name }}"
    port: "8080"
    subdomain: "cadvisor"
    tld: "{{ domain }}"
  cloudbeaver:
    network: "{{ networks.docker.primary.name }}"
    port: "8978"
    subdomain: "cloudbeaver"
    tld: "{{ domain }}"
  cockpit: # Example of a service on the host network being passed into the docker network for use with Traefik
    host: "{{ networks.docker.primary.gateway }}"
    network: "{{ networks.docker.primary.name }}"
    port: "9090"
    subdomain: "cockpit"
    tld: "{{ domain }}"
  deluge:
    network: "{{ networks.docker.primary.name }}"
    port: "8112"
    subdomain: "deluge"
    tld: "{{ domain }}"
  duplicacy:
    network: "{{ networks.docker.primary.name }}"
    port: "3875"
    subdomain: "duplicacy"
    tld: "{{ domain }}"
  emby:
    network: "{{ networks.docker.primary.name }}"
    port: "8096"
    subdomain: "emby"
    tld: "{{ domain }}"
  embystat:
    network: "{{ networks.docker.primary.name }}"
    port: "6555"
    subdomain: "embystat"
    tld: "{{ domain }}"
  gc:
    network: "{{ networks.docker.primary.name }}"
    subdomain: "gc"
    tld: "{{ domain }}"
  goautoyt:
    network: "{{ networks.docker.primary.name }}"
    port: "8080"
    subdomain: "goautoyt"
    tld: "{{ domain }}"
  grafana:
    network: "{{ networks.docker.primary.name }}"
    port: "3000"
    subdomain: "grafana"
    tld: "{{ domain }}"
  host: # Hostname of your server
    network: "{{ networks.docker.primary.name }}"
    port: "22" # SSH Port
    subdomain: "host"
    tld: "{{ domain }}"
  influxdb:
    network: "{{ networks.docker.primary.name }}"
    port: "8086"
    subdomain: "influxdb"
    tld: "{{ domain }}"
  lazylibrarian:
    network: "{{ networks.docker.primary.name }}"
    port: "5299"
    subdomain: "lazylibrarian"
    tld: "{{ domain }}"
  lidarr:
    network: "{{ networks.docker.primary.name }}"
    port: "8686"
    subdomain: "lidarr"
    tld: "{{ domain }}"
  mariadb:
    network: "{{ networks.docker.primary.name }}"
    port: "3306"
    subdomain: "mariadb"
    tld: "{{ domain }}"
  mellow:
    network: "{{ networks.docker.primary.name }}"
    port: "5060"
    subdomain: "mellow"
    tld: "{{ domain }}"
  mylar:
    network: "{{ networks.docker.primary.name }}"
    port: "8090"
    subdomain: "mylar"
    tld: "{{ domain }}"
  nextcloud:
    network: "{{ networks.docker.primary.name }}"
    port: "443"
    proto: "https"
    subdomain: "nextcloud"
    tld: "{{ domain }}"
  node_exporter:
    network: "{{ networks.docker.primary.name }}"
    port: "9100"
    subdomain: "node-exporter"
    tld: "{{ domain }}"
  nzbget:
    network: "{{ networks.docker.primary.name }}"
    port: "6789"
    subdomain: "nzbget"
    tld: "{{ domain }}"
  nzbhydra:
    network: "{{ networks.docker.primary.name }}"
    port: "5076"
    subdomain: "nzbhydra"
    tld: "{{ domain }}"
  oauth:
    network: "{{ networks.docker.primary.name }}"
    port: "4181"
    subdomain: "oauth"
    tld: "{{ domain }}"
  ombi:
    network: "{{ networks.docker.primary.name }}"
    port: "3579"
    subdomain:
      0: "ombi" # Program subdomain for apps to communicate
      1: "requests" # Public subdomain for users to access
    tld: "{{ domain }}"
  ombi4k:
    network: "{{ networks.docker.primary.name }}"
    port: "3579"
    subdomain:
      0: "ombi4k" # Program subdomain for apps to communicate
      1: "4krequests" # Public subdomain for users to access
    tld: "{{ domain }}"
  organizr:
    network: "{{ networks.docker.primary.name }}"
    subdomain:
      0: "organizr" # Program subdomain for apps to communicate
      1: "www" # Assumes Organizr will be the service you offer on your TLD
    tld: "{{ domain }}"
  plex:
    network: "{{ networks.docker.primary.name }}"
    port: 
      0: "32400" # Plex Server Port
      1: "33400" # Plex WebTools Port
    subdomain: 
      0: "plex" # Plex Server subdomain
      1: "plex-tools" # Plex WebTools subdomain
    tld: "{{ domain }}"
  portainer:
    network: "{{ networks.docker.primary.name }}"
    port: "9000"
    subdomain: "portainer"
    tld: "{{ domain }}"
  postgresql:
    network: "{{ networks.docker.primary.name }}"
    port: "5432"
    subdomain: "postgresql"
    tld: "{{ domain }}"
  privoxy:
    network: "{{ networks.docker.primary.name }}"
    port: "8118"
    subdomain: "privoxy"
    tld: "{{ domain }}"
  prometheus:
    network: "{{ networks.docker.primary.name }}"
    port: "9090"
    subdomain: "prometheus"
    tld: "{{ domain }}"
  promgen:
    network: "{{ networks.docker.primary.name }}"
    port: "8000"
    subdomain: "promgen"
    tld: "{{ domain }}"
  radarr:
    network: "{{ networks.docker.primary.name }}"
    port: "7878"
    subdomain: "radarr"
    tld: "{{ domain }}"
  radarr4k:
    network: "{{ networks.docker.primary.name }}"
    port: "7878"
    subdomain: "radarr4k"
    tld: "{{ domain }}"
  rclone:
    network: "{{ networks.docker.primary.name }}"
    port: "5572"
    subdomain: "rclone"
    tld: "{{ domain }}"
  readarr:
    network: "{{ networks.docker.primary.name }}"
    port: "8787"
    subdomain: "readarr"
    tld: "{{ domain }}"
  redis:
    network: "{{ networks.docker.primary.name }}"
    port: "6379"
    subdomain: "redis"
    tld: "{{ domain }}"
  sonarr:
    network: "{{ networks.docker.primary.name }}"
    port: "8989"
    subdomain: "sonarr"
    tld: "{{ domain }}"
  sonarr4k:
    network: "{{ networks.docker.primary.name }}"
    port: "8989"
    subdomain: "sonarr4k"
    tld: "{{ domain }}"
  speedtest:
    network: "{{ networks.docker.primary.name }}"
    subdomain: "speedtest"
    tld: "{{ domain }}"
  statping:
    network: "{{ networks.docker.primary.name }}"
    port: "8080"
    subdomain:
      0: "statping" # Program subdomain for apps to communicate
      1: "status" # Public subdomain for users to access
    tld: "{{ domain }}"
  syncarr_radarr:
    network: "{{ networks.docker.primary.name }}"
    subdomain: "syncarr-radarr"
    tld: "{{ domain }}"
  syncarr_sonarr:
    network: "{{ networks.docker.primary.name }}"
    subdomain: "syncarr-sonarr"
    tld: "{{ domain }}"
  synclounge:
    network: "{{ networks.docker.primary.name }}"
    port: "8088"
    subdomain: "synclounge"
    tld: "{{ domain }}"
  synclounge_server:
    network: "{{ networks.docker.primary.name }}"
    port: "8089"
    subdomain: "synclounge-server"
    tld: "{{ domain }}"
  tautulli:
    network: "{{ networks.docker.primary.name }}"
    port: "8181"
    subdomain: "tautulli"
    tld: "{{ domain }}"
  tdarr:
    network: "{{ networks.docker.primary.name }}"
    port: "8265"
    subdomain: "tdarr"
    tld: "{{ domain }}"
  traefik:
    network: "{{ networks.docker.primary.name }}"
    port: "8080"
    proto: "https"
    subdomain: "traefik"
    tld: "{{ domain }}"
  traktarr:
    network: "{{ networks.docker.primary.name }}"
    subdomain: "traktarr"
    tld: "{{ domain }}"
  varken:
    network: "{{ networks.docker.primary.name }}"
    subdomain: "varken"
    tld: "{{ domain }}"
  watchtower:
    network: "{{ networks.docker.primary.name }}"
    subdomain: "watchtower"
    tld: "{{ domain }}"

# Firewall rules for the host
firewall_rules:
  ssh: # Allow SSH access to the host
    name: OpenSSH
    rule: allow
    state: enabled
  http: # Allow incoming traffic on port 80 for Traefik
    port: 80
    proto: tcp
    rule: allow
  https: # Allow incoming traffic on port 443 for Traefik
    port: 443
    proto: tcp
    rule: allow
  plex: # Open ports for Plex to communicate with Plex.tv
    port: {32400, 3005, 8324}
    proto: tcp
    rule: allow
  cockpit: # Open Cockpit port to Traefik
    port: 9090
    rule: allow
    to_ip: "{{ containers.cockpit.port }}"

# Docker network rules
networks:
  docker:
    primary:
      driver: "bridge"
      gateway: "172.18.0.1"
      name: "www"
      subnet: "172.18.0.0/16"

# Directory structure of the entire project
directories:
  movies_4k: "4K Movies"
  tvshows_4k: "4K TV Shows"
  books: "Books"
  cache_dir: "cache"
  container_root: "/opt/appdata"
  data_dir: "/data"
  download_dir: "/data/downloads"
  drive_root: "/data/media"
  host_data_dir: "/opt/data"
  host_drive_root: "/opt/data/media"
  incomplete_dir: "/data/incomplete"
  media_dir: "media"
  movies: "Movies"
  music: "Music"
  tvshows: "TV Shows"

# Cloudflare account vars
cloudflare:
  api: "{{ lookup('lastpass', 'IT Services/Cloudflare', field='api') }}" # Cloudflare Global API key
  email: "{{ lookup('lastpass', 'IT Services/Cloudflare', field='email') }}" # Cloudflare account email address
  zoneid: "{{ lookup('lastpass', 'IT Services/Cloudflare', field='zoneid') }}" # Cloudflare zoneid

# Project wide API keys
api_keys:
  lazylibrarian: "{{ lookup('lastpass', '****/Lazy Librarian', field='api') }}"
  lidarr: "{{ lookup('lastpass', '****/Lidarr', field='api') }}"
  maxmind: "{{ lookup('lastpass', '****/maxmind.com', field='lisense') }}"
  nzbhydra: "{{ lookup('lastpass', '****/NZBHydra', field='api') }}"
  ombi: "{{ lookup('lastpass', '****/Ombi', field='api') }}"
  ombi4k: "{{ lookup('lastpass', '****/Ombi4K', field='api') }}"
  plextoken: "{{ lookup('lastpass', '****/Plex', field='api') }}"
  radarr: "{{ lookup('lastpass', '****/Radarr', field='api') }}"
  radarr4k: "{{ lookup('lastpass', '****/Radarr4K', field='api') }}"
  sonarr: "{{ lookup('lastpass', '****/Sonarr', field='api') }}"
  sonarr4k: "{{ lookup('lastpass', '****/Sonarr4K', field='api') }}"
  tautulli: "{{ lookup('lastpass', '****/Tautulli', field='api') }}"
  dev: 
    ombi: "{{ lookup('lastpass', '****/Ombi', field='api') }}"
    ombi4k: "{{ lookup('lastpass', '****/Ombi4K', field='api') }}"
    radarr: "{{ lookup('lastpass', '****/Radarr', field='api') }}"
    radarr4k: "{{ lookup('lastpass', '****/Radarr4K', field='api') }}"
    sonarr: "{{ lookup('lastpass', '****/Sonarr', field='api') }}"
    sonarr4k: "{{ lookup('lastpass', '****/Sonarr4K', field='api') }}"

# Oauth container vars
oauth:
  tld:
    email_1: "{{ lookup('lastpass', 'Email/****', field='username') }}" # Primary email Oauth should allow
    email_2: "{{ lookup('lastpass', 'Email/****', field='username') }}" # Secondary email Oauth should allow
    id: "{{ lookup('lastpass', '****/Traefik OAuth Client Details', field='username') }}"
    oauth_secret: "{{ lookup('lastpass', '****/Traefik OAuth Client Details', field='oauth_secret') }}"
    secret: "{{ lookup('lastpass', '****/Traefik OAuth Client Details', field='password') }}"

# SMTP E-Mail vars
mail:
  domain: "{{ domain }}" # Email Domain
  from_address: "user@example.com" # Email mail is sent from
  smtp_host: "smtp.email.com" # SMTP Host
  smtp_password: "{{ lookup('lastpass', 'Email/****', field='pp_password') }}" # SMTP server password
  smtp_port: "587" # SMTP Port # SMTP server port
  smtp_user: "{{ lookup('lastpass', 'Email/****', field='username') }}" # SMTP server username
  tls: "yes" # SMTP TLS use

# Remote Mount vars
mount_options:
  allow_non_empty: "true"
  allow_other: "true"
  auto_unmount: "true"
  bwlimit: 70M
  checkers: "4"
  cleaner: "600"
  dir_cache_time: 36h
  drive: "drive"
  drive_chunk_size: 64M
  fast_list: "true"
  log_level: "INFO"
  max_size: "100G"
  rc: "true"
  rc_pass: "{{ lookup('lastpass', '****/Rclone', field='password') }}"
  rc_serve: "true"
  rc_user: "{{ lookup('lastpass', '****/Rclone', field='username') }}"
  rc_web_gui: "true"
  rc_web_gui_no_open_browser: "true"
  stats: 1m
  stats_log_level: "INFO"
  tpslimit: "4"
  transfers: "4"
  umask: "002"
  user_agent: 2ZCrRi2CKFvz9GQQ
  vfs_cache_max_age: 3h
  vfs_cache_mode: writes
  vfs_read_chunk_size_limit: "off"
  cache_settings:
    chunk_clean_interval: "5m0s"
    chunk_size: "64M"
    chunk_total_size: "50G"
    cache_workers: "6"
    cache_writes: "true"
    db_purge: "false"
    info_age: "168h"
    workers: "6"

# Rclone specific vars
rclone:
  access_token: "{{ lookup('lastpass', '****/Google Drive', field='access_token') }}"
  client_id: "{{ lookup('lastpass', '****/Google Drive', field='client_id') }}"
  client_secret: "{{ lookup('lastpass', '****/Google Drive', field='client_secret') }}"
  expiry: "{{ lookup('lastpass', '****/Google Drive', field='expiry') }}"
  refresh_token: "{{ lookup('lastpass', '****/Google Drive', field='refresh_token') }}"
  root_folder_id: "{{ lookup('lastpass', '****/Google Drive', field='root_folder_id') }}"

# Duplicacy specific vars
duplicacy:
  access_token: "{{ lookup('lastpass', '****/Duplicacy', field='access_token') }}"
  administration_token: "{{ lookup('lastpass', '****/Duplicacy', field='administration_token') }}"
  client_id: "{{ lookup('lastpass', '****/Duplicacy', field='client_id') }}"
  email_password: "{{ lookup('lastpass', '****/Duplicacy', field='email_password') }}"
  email_password_hash: "{{ lookup('lastpass', '****/Duplicacy', field='email_password_hash') }}"
  encryption_data: "{{ lookup('lastpass', '****/Duplicacy', field='encryption_data') }}"
  expiry: "{{ lookup('lastpass', '****/Duplicacy', field='expiry') }}"
  gcd_token: "{{ lookup('lastpass', '****/Duplicacy', field='gcd_token') }}"
  license: "{{ lookup('lastpass', '****/Duplicacy', field='license') }}"
  license_id: "{{ lookup('lastpass', '****/Duplicacy', field='license_id') }}"
  machine_id: "{{ lookup('lastpass', '****/Duplicacy', field='machine_id') }}"
  refresh_token: "{{ lookup('lastpass', '****/Duplicacy', field='refresh_token') }}"
  signature: "{{ lookup('lastpass', '****/Duplicacy', field='signature') }}"
  dark_mode: "true" # Dark mode on web interface; true or false
  id: "gd_" # Duplicacy backups ID
  name: "G_Drive" # Remote storage name
  options: "-stats -threads 5" # Options to be applied to all configured backup and check tasks
  prune_options: "-a -exclusive -stats -threads 5" # Options to be applied to all configured prune tasks
  keep_options: "-keep 0:365 -keep 30:180 -keep 1:7" # Keep options for backups
  global_options: "-v" # Global options
  backup_name: "Appdata Backup" # Name of the backup task
  start_time: "2:00PM" # Start time of backup task
  max_run_time: "06:00" # Max length of backup task
  frequency: "86400" # Frequency of backup task
  days: "1000000" # How long should the task be scheduled for
  email_enabled: "true" # Should emails be sent to notify about backups
  email_summary: "false" # Should the email be summarised
  email_subject: "Duplicacy Notification" # Title of notifications email
  remote_folder: "Application Data Backup" # Folder on remote storage where backups are stored

# MariaDB specific vars
mariadb:
  bookstack_passwd: "{{ lookup('lastpass', '****/bookstack.mariadb', field='password') }}"
  cloudbeaver_passwd: "{{ lookup('lastpass', '****/cloudbeaver.mariadb', field='password') }}"
  grafana_passwd: "{{ lookup('lastpass', '****/grafana.mariadb', field='password') }}"
  mariadb_passwd: "{{ lookup('lastpass', '****/MariaDB', field='password') }}"
  nextcloud_passwd: "{{ lookup('lastpass', '****/nextcloud.mariadb', field='password') }}"
  promgen_passwd: "{{ lookup('lastpass', '****/promgen.mariadb', field='password') }}"
  statping_passwd: "{{ lookup('lastpass', '****/statping.mariadb', field='password') }}"
  login_host: "{{ containers.mariadb.subdomain }}"
  login_port: "{{ containers.mariadb.port }}"
  login_user: "{{ lookup('lastpass', '****/MariaDB', field='username') }}"

# PostgreSQL specific vars
postgresql:
  bookstack_passwd: "{{ lookup('lastpass', '****/bookstack.postgresql', field='password') }}"
  grafana_passwd: "{{ lookup('lastpass', '****/grafana.postgresql', field='password') }}"
  mariadb_passwd: "{{ lookup('lastpass', '****/PostgreSQL', field='password') }}"
  nextcloud_passwd: "{{ lookup('lastpass', '****/nextcloud.postgresql', field='password') }}"
  promgen_passwd: "{{ lookup('lastpass', '****/promgen.postgresql', field='password') }}"
  statping_passwd: "{{ lookup('lastpass', '****/statping.postgresql', field='password') }}"
  login_host: "{{ containers.postgresql.subdomain }}"
  login_port: "{{ containers.postgresql.port }}"
  login_user: "{{ lookup('lastpass', '****/PostgreSQL', field='username') }}"

# Nextcoud specific vars
nextcloud:
  admin_passwd: "{{ lookup('lastpass', '****/Nextcloud', field='password') }}"
  admin_user: "{{ lookup('lastpass', '****/Nextcloud', field='user') }}"
  instance_id: "{{ lookup('lastpass', '****/Nextcloud', field='instance_id') }}"
  passwd: "{{ lookup('lastpass', '****/nextcloud.mariadb', field='password') }}"
  passwd_salt: "{{ lookup('lastpass', '****/Nextcloud', field='password_salt') }}"
  secret: "{{ lookup('lastpass', '****/Nextcloud', field='secret') }}"

# InfluxDB specific vars
influxdb:
  admin_pass: "{{ lookup('lastpass', '****/InfluxDB', field='admin_pass') }}"
  admin_user: "{{ lookup('lastpass', '****/InfluxDB', field='admin_user') }}"
  db: "{{ containers.varken.subdomain }}" # Create the Varken InfluxDB database
  http_auth: "true"
  password: "{{ lookup('lastpass', '****/InfluxDB', field='password') }}"
  reporting: "true" # Should anonymous analytics be sent to the InfluxDB devs; Setting to false allows reporting, setting to true prevents reporting
  username: "{{ lookup('lastpass', '****/InfluxDB', field='username') }}"

# Grafana specific vars
grafana:
  admin:
    password: "{{ lookup('lastpass', '****/Grafana', field='password') }}"
    secret_key: "{{ lookup('lastpass', '****/Grafana', field='secret_key') }}"
    user: "{{ lookup('lastpass', '****/Grafana', field='username') }}"
  auth:
    client_id: "{{ lookup('lastpass', '****/Grafana', field='client_id') }}"
    client_secret: "{{ lookup('lastpass', '****/Grafana', field='client_secret') }}"
  vars:
    cookie_name: "cookie_name"

# NZBGet specific vars
nzbget:
  news_server:
    connections: "{{ lookup('lastpass', 'IT Services/****', field='connections') }}" # Amount of connections allowed to the News Server
    encryption: "{{ lookup('lastpass', 'IT Services/****', field='encryption') }}" # Is this an encrypted connection
    host: "{{ lookup('lastpass', 'IT Services/****', field='host') }}" # News Server FQDN
    name: "****" # Name of the News Server
    password: "{{ lookup('lastpass', '****/NZBGet', field='password') }}" # Password for the account
    port: "{{ lookup('lastpass', 'IT Services/****', field='port') }}" # Port to connect to the News Server
    retention: "{{ lookup('lastpass', 'IT Services/****', field='retention') }}" # Retention in days of the news server
    username: "{{ lookup('lastpass', 'IT Services/****', field='username') }}" # Username for the account
  daemon:
    ip: "0.0.0.0" # IP NZBGet should listen for connections
    port: "{{ containers.nzbget.port }}" # Port NZBGet should listen for connections
    restricted_password: "{{ lookup('lastpass', '****/NZBGet Client', field='password') }}" # Password for services account
    restricted_username: "{{ lookup('lastpass', '****/NZBGet Client', field='username') }}" # Username for services account
    password: "{{ lookup('lastpass', '****/NZBGet', field='password') }}" # Password for administrator account
    username: "{{ lookup('lastpass', '****/NZBGet', field='username') }}" # Username for administrator account

# Deluge specific vars
deluge:
  debug: "no"
  deluge_daemon_log_level: "info"
  deluge_web_log_level: "info"
  enable_privoxy: "no"
  lan_network: "{{ networks.docker.primary.subnet }}"
  name_servers: "209.222.18.222,84.200.69.80,37.235.1.174,1.1.1.1,209.222.18.218,37.235.1.177,84.200.70.40,1.0.0.1"
  strict_port_forward: "true"
  vpn_enabled: "yes"
  vpn_pass: "{{ lookup('lastpass', 'IT Services/****', field='password') }}"
  vpn_prov: "pia" # VPN Provider
  vpn_user: "{{ lookup('lastpass', 'IT Services/****', field='username') }}"

# Bazarr specific vars
bazarr:
  bazarr:
    password: "{{ lookup('lastpass', '****/Bazarr', field='api') }}"
    password: "{{ lookup('lastpass', '****/Bazarr', field='password') }}"
    username: "{{ lookup('lastpass', '****/Bazarr', field='username') }}"
  bazarr4k:
    password: "{{ lookup('lastpass', '****/Bazarr4K', field='api') }}"
    password: "{{ lookup('lastpass', '****/Bazarr4K', field='password') }}"
    username: "{{ lookup('lastpass', '****/Bazarr4K', field='username') }}"

# Lazy Librarian specific vars
lazylibrarian:
  general:
    http_pass: "{{ lookup('lastpass', '****/Lazy Librarian', field='password') }}"
    http_user: "{{ lookup('lastpass', '****/Lazy Librarian', field='username') }}"
  info_sources:
    provider: "GoogleBooks" # What information provider should Lazy Librarian use? Good Reads = 'GoodReads'. Google Books = 'GoogleBooks'.
    goodreads:
      api: "{{ lookup('lastpass', '****/Lazy Librarian', field='goodreads_api') }}"
    googlebooks:
      api: "{{ lookup('lastpass', '****/Lazy Librarian', field='googlebooks_api') }}"
      country: "US" # Two letter country code for geographically restricted content e.g: US GB ES

# Subtitle Provider vars
subtitle_provider:
  addic7ed:
    password: "{{ lookup('lastpass', 'IT Services/Addic7ed', field='password') }}"
    username: "{{ lookup('lastpass', 'IT Services/Addic7ed', field='username') }}"
  opensubtitles:
    password: "{{ lookup('lastpass', 'IT Services/Open Subtitles', field='password') }}"
    username: "{{ lookup('lastpass', 'IT Services/Open Subtitles', field='username') }}"
  subscene:
    api: "{{ lookup('lastpass', 'IT Services/Subscene', field='api') }}"
    password: "{{ lookup('lastpass', 'IT Services/Subscene', field='password') }}"
    username: "{{ lookup('lastpass', 'IT Services/Subscene', field='username') }}"
  anti_captcha:
    api: "{{ lookup('lastpass', 'IT Services/anti-captcha.com', field='api') }}"
    password: "{{ lookup('lastpass', 'IT Services/anti-captcha.com', field='password') }}"
    username: "{{ lookup('lastpass', 'IT Services/anti-captcha.com', field='username') }}"

# Trak.TV vars
trakttv:
  client_id: "{{ lookup('lastpass', 'IT Services/trakt.tv', field='client_id') }}"
  client_secret: "{{ lookup('lastpass', 'IT Services/trakt.tv', field='client_secret') }}"

# Mellow bot vars
mellow:
  password: "{{ lookup('lastpass', '****/Mellow', field='hash') }}"
  username: "{{ lookup('lastpass', '****/Mellow', field='username') }}"
  bot:
    admin: "admin"
    channelname: "****"
    commandprefix: "!flixcommand"
    defaultservice: "ombi"
    ownerid: "{{ lookup('lastpass', '****/Mellow', field='ownerid') }}"
    requestmovie: "movie"
    requesttv: "tv"
    selection: "emoji"
    token: "{{ lookup('lastpass', '****/Mellow', field='token') }}"

# Synclounge vars
synclounge:
  autojoin: "true" # Should Synclounge join the hosted server automatically?
  autojoinroom: "****" # Room that users join automatically

# Cloudbeaver vars
cloudbeaver:
  password: "{{ lookup('lastpass', '****/Cloudbeaver', field='password') }}"
  username: "{{ lookup('lastpass', '****/Cloudbeaver', field='username') }}"

# StatPing vars
statping:
  description: "{{ lookup('lastpass', '****/StatPing', field='description') }}"
  name: "{{ lookup('lastpass', '****/StatPing', field='name') }}"
  password: "{{ lookup('lastpass', '****/StatPing', field='password') }}"
  prefix: "{{ lookup('lastpass', '****/StatPing', field='prefix') }}"
  username: "{{ lookup('lastpass', '****/StatPing', field='username') }}"

# Redis vars
redis:
  password: "{{ lookup('lastpass', '****/Redis', field='password') }}"
  secret_key: "{{ lookup('lastpass', '****/Redis', field='secret_key') }}"
  username: "{{ lookup('lastpass', '****/Redis', field='username') }}"
...
